*****Register*****

INSERT INTO `register1`(`Register_Id`, `UserName`, `Email`, `Password`) VALUES ([1,''xxx','abc@hotmail.com','pass@13')
***
INSERT INTO `register1`(`Register_Id`, `UserName`, `Email`, `Password`) VALUES (1,'xxx','abc@hotmail.com','pass@13'),
(2,'yyy','asc@hotmail.com','pass@14'),
(3,'zzz','ayc@hotmail.com','pass@15')

*****Teacher*******

INSERT INTO  `teacherprofile` (  `Teacher_Id` ,  `Image` ,  `Register_Id` ,  `TeacherName` ,  `TeacherAddress` ,  `ContactNo` ,  `Biography_Skill` ) 
VALUES ( 1, 1, 4,  'abc',  'dhaka bangladesh', 017234890,  'Skill-Has done BSc in CSE.Expert C programer' ) , 
( 2, 2, 3,  'abc',  'Sylhet bangladesh', 016734890, 'Educational Skill-BSc in CSE. Interest Area-Java Programming Language' ) , 
( 3, 3, 4,  'abc',  'dhaka bangladesh', 017234890,  'Skill-Has done BSc in CSE.Expert in PHP' )



***Course****
INSERT INTO  `course` (  `Course_Id` ,  `CourseWeek` ,  `CourseName` ,  `Description` ,  `StartingDate` ,  `EndingDate` ) 
VALUES ( 1101, 4,  'C Programming', 'C  is a general-purpose, imperative computer programming language, supporting structured programming, lexical 
variable scope and recursion, while a static type system prevents many unintended operations. By design, C provides constructs that map efficiently to typical
 machine instructions, and therefore it has found lasting use in applications that had formerly been coded in assembly language, 
including operating systems, as well as various application software for computers ranging from supercomputers to embedded systems', '1-1-2016',  '5-1-2016' )
****
( 1104, 4,  'PHP Programming', 'PHP is a server-side scripting language designed for web development but also used as a general-purpose programming language.
 As of January 2013, PHP was installed on more than 240 million websites (39% of those sampled) and 2.1 million web servers.
Originally created by Rasmus Lerdorf in 1994,the reference implementation of PHP (powered by the Zend Engine) is now produced by The PHP Group.
 While PHP originally stood for Personal Home Page,[4] it now stands for PHP: Hypertext Preprocessor, which is a recursive backronym.',


 '1-5-2016',  '1-10-2016' )
**************************************
INSERT INTO  `course` (  `Course_Id` ,  `CourseWeek` ,  `CourseName` ,  `Description` ,  `StartingDate` ,  `EndingDate` ) 
VALUES ( 1103, 4,  'Java Programming', 'Java is a general-purpose computer programming language that is concurrent, class-based, object-oriented,
 and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "write once, run anywhere" (WORA),
meaning that compiled Java code can run on all platforms that support Java without the need for recompilation.Java applications are typically compiled to
 bytecode that can run on any Java virtual machine (JVM) regardless of computer architecture. As of 2015, Java is one of the most popular programming languages in use,
particularly for client-server web applications, with a reported 9 million developers.', '1-5-2016',  '1-10-2016' )
*******CHAPTER***********
INSERT INTO `chapter`(`Chapter_Id`, `ChapterName`, `Info`, `Course_Id`) 
VALUES (01,'A simple C program and Basic Datatypes','This tutorial is designed to be a stand-alone introduction to C ',1101)
***java
INSERT INTO `chapter`(`Chapter_Id`, `ChapterName`, `Info`, `Course_Id`) 
VALUES (02,'Basic Java Programming','This reference has been prepared for the beginners to
 help them understand the basic to advanced concepts related to Java Programming language. ',1103)

*****PHP

INSERT INTO `chapter`(`Chapter_Id`, `ChapterName`, `Info`, `Course_Id`) 
VALUES (03,'Basic PHP Programming','PHP is a server scripting language, and a powerful tool for making dynamic and interactive Web pages.

PHP is a widely-used, free, and efficient alternative to competitors such as Microsoft's ASP.',1105)


*****TOPICS/POST
INSERT INTO `post`(`Post_Id`, `Title`, `Date_Of_Post`, `Chapter_Id`) 
VALUES (01,'The very first thing you need to do, before starting out in C, is to make sure that you have a compiler. What is a compiler, you ask? A compiler turns the program that you write into an executable that your computer can actually understand and run. If you're taking a course, you probably have one provided through your school. If you're starting out on your own, your best bet is to use Code::Blocks with MinGW. If you're on Linux, you can use gcc, and if you're on Mac OS X, you can use XCode. If you haven't yet done so, go ahead and get a compiler set up--you'll need it for the rest of the tutorial.
Introduction to C
Every full C program begins inside a function called "main". A function is simply a collection of commands that do "something". The main function is always called when the program first executes. From main, we can call other functions, whether they be written by us or by others or use built-in language features. To access the standard functions that comes with your compiler, you need to include a header with the #include directive. What this does is effectively take everything in the header and paste it into your program. Let's look at a working program:
#include <stdio.h>
int main()
{
    printf( "I am alive!  Beware.\n" );
    getchar();
    return 0;
}
Let's look at the elements of the program. The #include is a "preprocessor" directive that tells the compiler to put code 
from the header called stdio.h into our program before actually creating the executable. By including header files, you can
 gain access to many different functions--both the printf and getchar functions are included in stdio.h. 

The next important line is int main(). This line tells the compiler that there is a function named main, and that the function 
returns an integer, hence int. The "curly braces" ({ and }) signal the beginning and end of functions and other code blocks. If you have programmed in Pascal, you will know them as BEGIN and END. Even if you haven't programmed in Pascal, this is a good way to think about their meaning. 

The printf function is the standard C way of displaying output on the screen. The quotes tell the compiler that you want to 
output the literal string as-is (almost). The '\n' sequence is actually treated as a single character that stands for a newline 
(we'll talk about this later in more detail); for the time being, just remember that there are a few sequences that, when they appear in a string literal, are actually not displayed literally by printf and that '\n' is one of them. The actual effect of '\n' is to move the cursor on your screen to the next line. Notice the semicolon: it tells the compiler that you're at the end of a command, such as a function call. You will see that the semicolon is used to end many lines in C. 

The next command is getchar(). This is another function call: it reads in a single character and waits for the user to hit 
enter before reading the character. This line is included because many compiler environments will open a new console window,
 run the program, and then close the window before you can see the output. This command keeps that window from closing because
 the program is not done yet because it waits for you to hit enter. Including that line gives you time to see the program run. 

Finally, at the end of the program, we return a value from main to the operating system by using the return statement. 
This return value is important as it can be used to tell the operating system whether our program succeeded or not. A return value of 0 means success. 

The final brace closes off the function. You should try compiling this program and running it. You can cut and paste the 
code into a file, save it as a .c file, and then compile it. If you are using a command-line compiler, such as Borland C++ 5.5,
 you should read the compiler instructions for information on how to compile. Otherwise compiling and running should be as simple as 
clicking a button with your mouse (perhaps the "build" or "run" button). ','01-10-2015',1)

*************JAVA ***********


















